{"title":"二叉搜索树","date":"2020-12-06T07:58:00.000Z","date_formatted":{"ll":"Dec 6, 2020","L":"12/06/2020","MM-DD":"12-06"},"link":"2020/12/06/xuyuntian/算法相关/树/BST","tags":["BST","二叉树"],"categories":["算法"],"updated":"2021-02-02T02:17:22.940Z","content":"<h1 id=\"二叉搜索树\">二叉搜索树<a title=\"#二叉搜索树\" href=\"#二叉搜索树\"></a></h1>\n<h2 id=\"定义\">定义<a title=\"#定义\" href=\"#定义\"></a></h2>\n<ul>\n<li>二叉搜索树是个二叉树</li>\n<li>对于任何一个结点，它的孩子结点在不为空的情况必有左子结点关键字不大于该结点，右子结点关键字值不小于它的关键字值。</li>\n</ul>\n<h2 id=\"基本操作\">基本操作<a title=\"#基本操作\" href=\"#基本操作\"></a></h2>\n<h3 id=\"查找\">查找<a title=\"#查找\" href=\"#查找\"></a></h3>\n<p>从根结点root开始，查关键字，key,如果key &gt; root.key,以root.left为root继续查找 反之以root.right为root继续查找,root == key,或者 root == null时终止</p>\n<h3 id=\"插入\">插入<a title=\"#插入\" href=\"#插入\"></a></h3>\n<p>从根结点找到一个结点x —&gt;满足它可以放到x的孩子结点。</p>\n<h3 id=\"删除\">删除<a title=\"#删除\" href=\"#删除\"></a></h3>\n<p>删除某个结点z,如果是z只有一个子结点，将该结点直接替换z<br>\n如果存在2个子结点按照以下情况处理</p>\n<ul>\n<li>找到右子结点中值最小的结点y:如果 y != x执行以下操作 -&gt; 用 y.right 取代当前 y在树中的位置;y.right = z.right;</li>\n<li>用y取代z,y.left = z.left</li>\n</ul>\n<h2 id=\"demo(带p节点)\">Demo(带p节点)<a title=\"#demo(带p节点)\" href=\"#demo(带p节点)\"></a></h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.study.tree;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.function.Consumer;</span><br><span class=\"line\"></span><br><span class=\"line\">public class BinarySearchTree &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Node root;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void insert(Integer key)&#123;</span><br><span class=\"line\">        Node curP &#x3D; root;</span><br><span class=\"line\">        Node cur &#x3D; new Node(key);</span><br><span class=\"line\">        Node iterator &#x3D; curP;</span><br><span class=\"line\">        while (iterator !&#x3D;null)&#123;</span><br><span class=\"line\">            curP &#x3D; iterator;</span><br><span class=\"line\">            if(iterator.key &gt; key)&#123;</span><br><span class=\"line\">                iterator &#x3D; iterator.left;</span><br><span class=\"line\">            &#125;else &#123;</span><br><span class=\"line\">                iterator &#x3D; iterator.right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cur.parent &#x3D; curP;</span><br><span class=\"line\">        if(curP &#x3D;&#x3D; null)&#123;</span><br><span class=\"line\">            root &#x3D; cur;</span><br><span class=\"line\">        &#125;else if (curP.key &gt; key)&#123;</span><br><span class=\"line\">            curP.left &#x3D; cur;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            curP.right &#x3D; cur;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#x2F;&#x2F;    用 b 替代 a</span><br><span class=\"line\">    private void replace(Node a,Node b)&#123;</span><br><span class=\"line\">        if(a &#x3D;&#x3D; root)&#123;</span><br><span class=\"line\">            root &#x3D; b;</span><br><span class=\"line\">            if(b!&#x3D;null) b.parent &#x3D; null;</span><br><span class=\"line\">        &#125;else if(a.parent.left &#x3D;&#x3D; a)&#123;</span><br><span class=\"line\">            a.parent.left &#x3D; b;</span><br><span class=\"line\">            if(b !&#x3D; null) b.parent &#x3D; a.parent.left;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            a.parent.right &#x3D; b;</span><br><span class=\"line\">            if(b!&#x3D;null) b.parent &#x3D; a.parent.right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void delete(Integer key)&#123;</span><br><span class=\"line\">        Node delNode &#x3D; search(key);</span><br><span class=\"line\">        if(delNode &#x3D;&#x3D; null) return;</span><br><span class=\"line\">        if(delNode.right &#x3D;&#x3D; null)&#123;</span><br><span class=\"line\">            replace(delNode,delNode.left);</span><br><span class=\"line\">        &#125;else if(delNode.left &#x3D;&#x3D; null)&#123;</span><br><span class=\"line\">            replace(delNode,delNode.right);</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            Node min &#x3D; minNode(delNode.right);</span><br><span class=\"line\">            if(min !&#x3D; delNode.right)&#123;</span><br><span class=\"line\">                replace(min,min.right);</span><br><span class=\"line\">&#x2F;&#x2F;                处理删除结点的右子树</span><br><span class=\"line\">                min.right &#x3D; delNode.right;</span><br><span class=\"line\">                delNode.right.parent &#x3D; min;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            replace(delNode,min);</span><br><span class=\"line\">&#x2F;&#x2F;            处理删除结点的左子树</span><br><span class=\"line\">            min.left &#x3D; delNode.left;</span><br><span class=\"line\">            delNode.left.parent &#x3D; min;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Node search(Integer key)&#123;</span><br><span class=\"line\">        Node it &#x3D; root;</span><br><span class=\"line\">        while (it !&#x3D; null)&#123;</span><br><span class=\"line\">            if(it.key &#x3D;&#x3D; key) return it;</span><br><span class=\"line\">            if(it.key &gt;&#x3D; key) it &#x3D; it.left;</span><br><span class=\"line\">            else it &#x3D; it.right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Node minNode(Node p)&#123;</span><br><span class=\"line\">        Node iterator &#x3D; p;</span><br><span class=\"line\">        Node res &#x3D; null;</span><br><span class=\"line\">        while (iterator !&#x3D;null )&#123;</span><br><span class=\"line\">            res &#x3D; iterator;</span><br><span class=\"line\">            iterator &#x3D; iterator.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void printInOrder()&#123;</span><br><span class=\"line\">        inOrder(t -&gt; System.out.println(t.key),root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void inOrder(Consumer&lt;Node&gt; consumer,Node start)&#123;</span><br><span class=\"line\">        if(start !&#x3D; null)&#123;</span><br><span class=\"line\">            inOrder(consumer,start.left);</span><br><span class=\"line\">            consumer.accept(start);</span><br><span class=\"line\">            inOrder(consumer,start.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static class Node &#123;</span><br><span class=\"line\">        Node left;</span><br><span class=\"line\">        Node right;</span><br><span class=\"line\">        Node parent;</span><br><span class=\"line\">        Integer key;</span><br><span class=\"line\">        Node(Integer key)&#123;</span><br><span class=\"line\">            this.key &#x3D; key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        BinarySearchTree bst &#x3D; new BinarySearchTree();</span><br><span class=\"line\">        bst.insert(2);</span><br><span class=\"line\">        bst.insert(6);</span><br><span class=\"line\">        bst.insert(4);</span><br><span class=\"line\">        bst.insert(7);</span><br><span class=\"line\">        bst.insert(17);</span><br><span class=\"line\">        bst.insert(16);</span><br><span class=\"line\">        bst.insert(22);</span><br><span class=\"line\">        bst.insert(2);</span><br><span class=\"line\">        bst.insert(4);</span><br><span class=\"line\">        bst.printInOrder();</span><br><span class=\"line\">        bst.delete(2);</span><br><span class=\"line\">        System.out.println(&quot;-------------&quot;);</span><br><span class=\"line\">        bst.printInOrder();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h2>\n<blockquote>\n<p>二叉搜索树最复杂的地方在于删除操作，其他的地方很容易理解</p>\n</blockquote>\n<h2 id=\"参考资料\">参考资料<a title=\"#参考资料\" href=\"#参考资料\"></a></h2>\n<blockquote>\n<p>《算法导论第三版》</p>\n</blockquote>\n","prev":{"title":"简介","link":"2021/01/30/简介"},"next":{"title":"堆","link":"2020/11/28/xuyuntian/算法相关/树/堆"},"plink":"http://example.com/2020/12/06/xuyuntian/算法相关/树/BST/","toc":[{"id":"二叉搜索树","title":"二叉搜索树","index":"1","children":[{"id":"定义","title":"定义","index":"1.1"},{"id":"基本操作","title":"基本操作","index":"1.2","children":[{"id":"查找","title":"查找","index":"1.2.1"},{"id":"插入","title":"插入","index":"1.2.2"},{"id":"删除","title":"删除","index":"1.2.3"}]},{"id":"demo(带p节点)","title":"Demo(带p节点)","index":"1.3"},{"id":"总结","title":"总结","index":"1.4"},{"id":"参考资料","title":"参考资料","index":"1.5"}]}]}