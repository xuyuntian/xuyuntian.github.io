{"title":"二分查找","date":"2021-01-30T10:22:00.000Z","date_formatted":{"ll":"Jan 30, 2021","L":"01/30/2021","MM-DD":"01-30"},"link":"2021/01/30/xuyuntian/算法相关/策略/二分查找","tags":["二分查找"],"categories":["算法"],"updated":"2021-02-02T02:17:22.941Z","content":"<blockquote>\n<p>写个文章真的费时间啊</p>\n</blockquote>\n<h1 id=\"二分查找\">二分查找<a title=\"#二分查找\" href=\"#二分查找\"></a></h1>\n<ol>\n<li>普通的二分查找,判断数组中是否存在特定的值</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean binarySearch(int[] arr,int val)&#123;</span><br><span class=\"line\">    int l &#x3D; 0;</span><br><span class=\"line\">    int r &#x3D; arr.length -1;</span><br><span class=\"line\">    while(l &lt;&#x3D; r)&#123;</span><br><span class=\"line\">        int mid &#x3D;  l + (r-l)&#x2F;2;</span><br><span class=\"line\">        if(arr[mid] &#x3D;&#x3D; val) return true;</span><br><span class=\"line\">        else if(arr[mid] &lt; val)&#123;</span><br><span class=\"line\">            l &#x3D; mid +1;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            r &#x3D; mid -1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>二分查找变形之一,找到数组中第一个等于该值的下标</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public int binarySearch(int[] arr,int val)&#123;</span><br><span class=\"line\">    int l &#x3D; 0;</span><br><span class=\"line\">    int r &#x3D; arr.length -1;</span><br><span class=\"line\">    while(l &lt;&#x3D; r)&#123;</span><br><span class=\"line\">        int mid &#x3D;  l + (r-l)&#x2F;2;</span><br><span class=\"line\">        if(arr[l] &#x3D;&#x3D; val) return l; &#x2F;&#x2F;以左侧为基准比较，mid为基准缩小范围</span><br><span class=\"line\">        if(arr[mid] &#x3D;&#x3D; val)&#123;</span><br><span class=\"line\">            r &#x3D; mid;</span><br><span class=\"line\">            l &#x3D; l++;</span><br><span class=\"line\">        &#125;else if(arr[mid]&gt;val)&#123;</span><br><span class=\"line\">            r &#x3D; mid -1;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            l &#x3D; mid +1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return -1;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>二分查找变形之一，找到数组中最后一个等于该值的下标</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public int binarySearch(int[] arr,int val)&#123;</span><br><span class=\"line\">    int l &#x3D; 0;</span><br><span class=\"line\">    int r &#x3D; arr.length -1;</span><br><span class=\"line\">    while(l &lt;&#x3D; r)&#123;</span><br><span class=\"line\">        int mid &#x3D;  l + (r-l)&#x2F;2;</span><br><span class=\"line\">        if(arr[r] &#x3D;&#x3D; val) return r; &#x2F;&#x2F;以右侧为基准比较，mid为基准缩小范围</span><br><span class=\"line\">        if(arr[mid] &#x3D;&#x3D; val)&#123;</span><br><span class=\"line\">            l &#x3D; mid;</span><br><span class=\"line\">            r--;</span><br><span class=\"line\">        &#125;else if(arr[mid]&gt;val)&#123;</span><br><span class=\"line\">            r &#x3D; mid -1;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            l &#x3D; mid +1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>二分查找变形之一，找到第一个大于某个值的数</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public int binarySearch(int[] arr,int val)&#123;</span><br><span class=\"line\">    int l &#x3D; 0;</span><br><span class=\"line\">    int r &#x3D; arr.length -1;</span><br><span class=\"line\">    while(l &lt;&#x3D; r)&#123;</span><br><span class=\"line\">        int mid &#x3D;  l + (r-l)&#x2F;2;</span><br><span class=\"line\">        if(arr[l] &gt; val) return l;</span><br><span class=\"line\">        else if(arr[mid] &gt; val)&#123;</span><br><span class=\"line\">            r &#x3D; mid;</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        else l &#x3D; mid +1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>二分查找变形之一，找到最后一个小于某个值的数</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public int binarySearch(int[] arr,int val)&#123;</span><br><span class=\"line\">    int l &#x3D; 0;</span><br><span class=\"line\">    int r &#x3D; arr.length -1;</span><br><span class=\"line\">    while(l &lt;&#x3D; r)&#123;</span><br><span class=\"line\">        int mid &#x3D;  l + (r-l)&#x2F;2;</span><br><span class=\"line\">        if(arr[r] &lt; val) return r;</span><br><span class=\"line\">        else if(arr[mid] &lt; val)&#123;</span><br><span class=\"line\">            l &#x3D; mid;</span><br><span class=\"line\">            r--;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            r &#x3D; mid -1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>二分查找的本质是缩小范围，如何缩小范围需要自己来判断。这就需要反思考了。</p>\n","prev":{"title":"java类型转换","link":"2021/02/02/xuyuntian/java/强制类型转换"},"next":{"title":"算法攻略-1","link":"2021/01/30/xuyuntian/算法相关/leetcode/系列1"},"plink":"http://example.com/2021/01/30/xuyuntian/算法相关/策略/二分查找/","toc":[{"id":"二分查找","title":"二分查找","index":"1"}]}