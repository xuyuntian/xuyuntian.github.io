{"title":"矩阵和","date":"2021-03-17T10:00:00.000Z","date_formatted":{"ll":"Mar 17, 2021","L":"03/17/2021","MM-DD":"03-17"},"link":"2021/03/17/xuyuntian/算法相关/策略/dp_matrix","tags":["动态规划","矩阵"],"categories":["算法"],"updated":"2021-03-17T07:28:11.881Z","content":"<h1 id=\"矩阵和\">矩阵和<a title=\"#矩阵和\" href=\"#矩阵和\"></a></h1>\n<h2 id=\"1.子矩阵的和\">1.子矩阵的和<a title=\"#1.子矩阵的和\" href=\"#1.子矩阵的和\"></a></h2>\n<p>有些矩阵问题中，需要反复使用矩阵中的子矩阵的和中，为了避免重复计算，可以通过动态规划来分解子问题，避免重复计算.</p>\n<p>对于一个 m x n的矩阵。如果我们想知道它的子矩阵 &lt;[i,j],[k,l]&gt;,那么该如何计算呢？</p>\n<blockquote>\n<p>&lt;[i,j],[k,l]&gt; : 以[i,j]为矩阵的左上角，以[k,l]为矩阵的右下角，组成的矩阵中，每个元素的和</p>\n</blockquote>\n<p><strong>对于&lt;[i,j],[k,l]&gt;来说</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;[i,j],[k,l]&gt; &#x3D; &lt;[0,0],[k,l]&gt; - &lt;[0,0],[i-1,l]&gt; - &lt;[0,0],[k,j-1]&gt; + &lt;[0,0],[i-1,j-1]&gt;</span><br></pre></td></tr></table></figure>\n<p>例如：如下图所示的矩阵&lt;[2,1],[3,2]&gt; = &lt;[0,0],[3,2]&gt; - &lt;[0,0],[1,2]&gt; - &lt;[0,0],[3,0]&gt; + &lt;[0,0],[1,0]&gt;</p>\n<p><img src=\"imgs/xuyuntian/alg/matrix_rule.png\" alt=\"\" class=\"φcx\"></p>\n<p>现在，如果我们可以求出&lt;[0,0],[x,y]&gt;的值的话，便可以很方便求出&lt;[i,j],[k,l]&gt;的值。</p>\n<h2 id=\"2.子问题-&lt;[0,0],[x,y]&gt;\">2.子问题 &lt;[0,0],[x,y]&gt;<a title=\"#2.子问题-&lt;[0,0],[x,y]&gt;\" href=\"#2.子问题-&lt;[0,0],[x,y]&gt;\"></a></h2>\n<blockquote>\n<ul>\n<li>先定义一个符号dp[x+1,y+1] 表示  &lt;[0,0],[x,y]&gt;</li>\n<li>m[x][y] 为矩阵中x行，y列中对应的值</li>\n<li>dp[x][0] = 0;</li>\n<li>dp[0][y] = 0;</li>\n<li>x,y从0开始</li>\n</ul>\n</blockquote>\n<p>由矩阵的性质很容易得出:</p>\n<ul>\n<li>dp[x+1][y+1] = dp[x][y+1] + dp[x+1][y] + m[x][y] - dp[x][y];</li>\n</ul>\n<p>例如：如下图所示</p>\n<p>&lt;[0,0],[1,1]&gt; =  dp[2][2] = dp[2][1] + dp[1][2] + m[1][1] - dp[1][1];</p>\n<p><img src=\"imgs/xuyuntian/alg/matrix_rule_2.png\" alt=\"\" class=\"φcx\"></p>\n<h2 id=\"3.整个矩阵的迭代流程\">3.整个矩阵的迭代流程<a title=\"#3.整个矩阵的迭代流程\" href=\"#3.整个矩阵的迭代流程\"></a></h2>\n<p><img src=\"imgs/xuyuntian/alg/matrix_dp_1.png\" alt=\"\"><br>\n<img src=\"imgs/xuyuntian/alg/matrix_dp_2.png\" alt=\"\"><br>\n<img src=\"imgs/xuyuntian/alg/matrix_dp_3.png\" alt=\"\"></p>\n<p>伪代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int[][] m &#x3D; ....</span><br><span class=\"line\">int M &#x3D; m.length;</span><br><span class=\"line\">int N &#x3D; m[0].length;</span><br><span class=\"line\">int[][] dp &#x3D; new int[M+1][N+1];</span><br><span class=\"line\">for(int i &#x3D; 0;i &lt; M;i++)&#123;</span><br><span class=\"line\">    for(int j &#x3D; 0;j &lt; N;j++)&#123;</span><br><span class=\"line\">        dp[i+1][j+1] &#x3D; dp[i][j+1] + dp[i+1][j] + m[i][j] - dp[i][j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"4.实践\">4.实践<a title=\"#4.实践\" href=\"#4.实践\"></a></h2>\n<p><a href=\"https://leetcode.com/problems/matrix-block-sum/\" target=\"_blank\">leetcode原题matrix-block-sum</a></p>\n<p>其中使用来上述原理,代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public int[][] matrixBlockSum(int[][] mat, int K) &#123;</span><br><span class=\"line\">        int m &#x3D; mat.length;</span><br><span class=\"line\">        int n &#x3D; mat[0].length;</span><br><span class=\"line\">        &#x2F;&#x2F;</span><br><span class=\"line\">        int[][] dp &#x3D; new int[m+1][n+1];&#x2F;&#x2F;表示 0,0 ~ i,j;</span><br><span class=\"line\">        for(int i&#x3D; 0;i &lt; m;i++)&#123;</span><br><span class=\"line\">            for(int j &#x3D; 0;j &lt; n;j++)&#123;</span><br><span class=\"line\">                dp[i+1][j+1] &#x3D; dp[i][j+1] + mat[i][j] + dp[i+1][j] - dp[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int[][] res &#x3D; new int[m][n];</span><br><span class=\"line\">        for(int i &#x3D; 0;i &lt; m;i++)&#123;</span><br><span class=\"line\">            for(int j &#x3D; 0;j &lt; n;j++)&#123;</span><br><span class=\"line\">                int r1 &#x3D; Math.max(0,i-K);</span><br><span class=\"line\">                int c1 &#x3D; Math.max(0,j-K);</span><br><span class=\"line\">                int r2 &#x3D; Math.min(m-1,i+K);</span><br><span class=\"line\">                int c2 &#x3D; Math.min(n-1,j+K);</span><br><span class=\"line\">                res[i][j] &#x3D; dp[r2+1][c2+1] - dp[r2+1][c1]  - dp[r1][c2+1] + dp[r1][c1];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","next":{"title":"HashMap 源码解析","link":"2021/03/09/xuyuntian/java/hash_map"},"plink":"http://example.com/2021/03/17/xuyuntian/算法相关/策略/dp_matrix/","toc":[{"id":"矩阵和","title":"矩阵和","index":"1","children":[{"id":"1.子矩阵的和","title":"1.子矩阵的和","index":"1.1"},{"id":"2.子问题-&lt;[0,0],[x,y]&gt;","title":"2.子问题 &lt;[0,0],[x,y]&gt;","index":"1.2"},{"id":"3.整个矩阵的迭代流程","title":"3.整个矩阵的迭代流程","index":"1.3"},{"id":"4.实践","title":"4.实践","index":"1.4"}]}]}